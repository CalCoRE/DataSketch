{"version":3,"file":"../../../../../../modules/datasketch/canvas/objects/custom/model.js","sources":["modules/datasketch/canvas/objects/custom/model.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,WAAA,GAAc,OAAA,CAAQ,8CAAR;IACd,KAAA,GAAQ,OAAA,CAAQ,iBAAR;IAER,QAAA,GACE;MAAA,MAAA,EACE;QAAA,KAAA,EAAO,CAAP;QACA,KAAA,EAAO,SADP;OADF;MAGA,IAAA,EACE;QAAA,KAAA,EAAO,IAAP;OAJF;;WAMI;;;MACS,qBAAC,MAAD;;;;QACX,MAAM,CAAC,QAAP,GAAkB,KAAK,CAAC,cAAN,CAAqB,MAAM,CAAC,QAA5B,EAAsC,QAAtC;QAClB,6CAAM,MAAN;MAFW;;4BAIb,WAAA,GAAa,SAAC,MAAD;QACX,IAAC,CAAA,GAAD,CAAK,UAAL,EACE;UAAA,CAAA,EAAG,MAAM,CAAC,IAAV;UACA,CAAA,EAAG,MAAM,CAAC,GADV;SADF;QAGA,IAAC,CAAA,GAAD,CAAK,UAAL,EAAiB,MAAM,CAAC,KAAxB;QACA,IAAC,CAAA,GAAD,CAAK,OAAL,EACE;UAAA,CAAA,EAAG,MAAM,CAAC,MAAV;UACA,CAAA,EAAG,MAAM,CAAC,MADV;SADF;QAGA,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,MAAM,CAAC,WAA5B;eACA,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,MAAM,CAAC,MAA5B;MATW;;4BAWb,UAAA,GAAY,SAAA;QACV,0CAAA;eACA,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB,KAAK,CAAC,cAAN,CAAqB,IAAC,CAAA,GAAD,CAAK,QAAL,CAArB,EAAqC,EAArC;MAFP;;4BAIZ,YAAA,GAAc,SAAA;QACZ,IAAG,mBAAH;UACE,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,IAAC,CAAA,MAAM,CAAC,MAAM,CAAC,KAApC;UACA,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,IAAC,CAAA,MAAM,CAAC,MAAM,CAAC,KAApC,EAFF;;eAGA,4CAAA;MAJY;;;;OApBU;EAXrB,CAAP;AAAA","sourcesContent":["define (require) ->\n  ObjectModel = require 'modules/datasketch/canvas/objects/base/model'\n  Utils = require 'core/util/utils'\n  \n  defaults =    \n    stroke:\n      width: 1\n      color: \"#000000\"\n    fill: \n      color: null\n    \n  class CustomModel extends ObjectModel\n    constructor: (config) ->\n      config.defaults = Utils.ensureDefaults config.defaults, defaults\n      super config\n\n    parseFabric: (fabric) =>      \n      @set 'position',\n        x: fabric.left\n        y: fabric.top\n      @set 'rotation', fabric.angle\n      @set 'scale',\n        x: fabric.scaleX\n        y: fabric.scaleY\n      @set 'stroke.width', fabric.strokeWidth\n      @set 'stroke.color', fabric.stroke\n\n    cacheState: () =>\n      super()\n      @_cache.stroke = Utils.ensureDefaults @get('stroke'), {}\n\n    restoreState: () =>\n      if @_cache?\n        @set 'stroke.color', @_cache.stroke.color\n        @set 'stroke.width', @_cache.stroke.width\n      super()"]}