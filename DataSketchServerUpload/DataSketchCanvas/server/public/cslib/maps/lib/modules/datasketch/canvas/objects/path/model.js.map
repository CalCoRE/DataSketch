{"version":3,"file":"../../../../../../../lib/modules/datasketch/canvas/objects/path/model.js","sources":["lib/modules/datasketch/canvas/objects/path/model.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,WAAA,GAAc,OAAA,CAAQ,8CAAR;IACd,KAAA,GAAQ,OAAA,CAAQ,iBAAR;IAER,QAAA,GACE;MAAA,QAAA,EAAU,EAAV;MACA,MAAA,EACE;QAAA,KAAA,EAAO,CAAP;QACA,KAAA,EAAO,MADP;OAFF;MAIA,IAAA,EACE;QAAA,KAAA,EAAO,MAAP;OALF;;WAOI;;;MACS,mBAAC,MAAD;;;;QACX,MAAM,CAAC,QAAP,GAAkB,KAAK,CAAC,cAAN,CAAqB,MAAM,CAAC,QAA5B,EAAsC,QAAtC;QAClB,2CAAM,MAAN;MAFW;;0BAIb,WAAA,GAAa,SAAC,MAAD;QACX,IAAC,CAAA,GAAD,CAAK,UAAL,EAAiB,MAAM,CAAC,IAAxB;QACA,IAAC,CAAA,GAAD,CAAK,UAAL,EACE;UAAA,CAAA,EAAG,MAAM,CAAC,IAAV;UACA,CAAA,EAAG,MAAM,CAAC,GADV;SADF;QAGA,IAAC,CAAA,GAAD,CAAK,UAAL,EAAiB,MAAM,CAAC,KAAxB;QACA,IAAC,CAAA,GAAD,CAAK,OAAL,EACE;UAAA,CAAA,EAAG,MAAM,CAAC,MAAV;UACA,CAAA,EAAG,MAAM,CAAC,MADV;SADF;QAGA,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,MAAM,CAAC,WAA5B;QACA,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,MAAM,CAAC,MAA5B;eACA,IAAC,CAAA,GAAD,CAAK,YAAL,EAAmB,MAAM,CAAC,IAA1B;MAXW;;0BAab,UAAA,GAAY,SAAA;QACV,wCAAA;QACA,IAAC,CAAA,MAAM,CAAC,MAAR,GAAiB,KAAK,CAAC,cAAN,CAAqB,IAAC,CAAA,GAAD,CAAK,QAAL,CAArB,EAAqC,EAArC;eACjB,IAAC,CAAA,MAAM,CAAC,IAAR,GAAe,KAAK,CAAC,cAAN,CAAqB,IAAC,CAAA,GAAD,CAAK,MAAL,CAArB,EAAmC,EAAnC;MAHL;;0BAKZ,YAAA,GAAc,SAAA;QACZ,IAAG,mBAAH;UACE,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,IAAC,CAAA,MAAM,CAAC,MAAM,CAAC,KAApC;UACA,IAAC,CAAA,GAAD,CAAK,YAAL,EAAmB,IAAC,CAAA,MAAM,CAAC,IAAI,CAAC,KAAhC;UACA,IAAC,CAAA,GAAD,CAAK,cAAL,EAAqB,IAAC,CAAA,MAAM,CAAC,MAAM,CAAC,KAApC,EAHF;;eAIA,0CAAA;MALY;;;;OAvBQ;EAZnB,CAAP;AAAA","sourcesContent":["define (require) ->\n  ObjectModel = require 'modules/datasketch/canvas/objects/base/model'\n  Utils = require 'core/util/utils'\n  \n  defaults =\n    pathData: []\n    stroke:\n      width: 1\n      color: \"#000\"\n    fill: \n      color: \"#000\"  \n    \n  class PathModel extends ObjectModel\n    constructor: (config) ->\n      config.defaults = Utils.ensureDefaults config.defaults, defaults\n      super config\n\n    parseFabric: (fabric) =>      \n      @set 'pathData', fabric.path\n      @set 'position',\n        x: fabric.left\n        y: fabric.top\n      @set 'rotation', fabric.angle\n      @set 'scale',\n        x: fabric.scaleX\n        y: fabric.scaleY\n      @set 'stroke.width', fabric.strokeWidth\n      @set 'stroke.color', fabric.stroke      \n      @set 'fill.color', fabric.fill\n\n    cacheState: () =>\n      super()\n      @_cache.stroke = Utils.ensureDefaults @get('stroke'), {}\n      @_cache.fill = Utils.ensureDefaults @get('fill'), {}  \n\n    restoreState: () =>\n      if @_cache?\n        @set 'stroke.color', @_cache.stroke.color\n        @set 'fill.color', @_cache.fill.color\n        @set 'stroke.width', @_cache.stroke.width\n      super()\n"]}