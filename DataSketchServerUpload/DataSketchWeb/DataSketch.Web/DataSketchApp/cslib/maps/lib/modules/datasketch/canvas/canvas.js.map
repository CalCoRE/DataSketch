{"version":3,"file":"../../../../../lib/modules/datasketch/canvas/canvas.js","sources":["lib/modules/datasketch/canvas/canvas.coffee"],"names":[],"mappings":"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","sourcesContent":["define (require) ->\r\n  Controller = require 'core/controller/controller'\r\n  View = require './view'\r\n  Model = require './model'\r\n  Globals = require 'core/model/globals'\r\n  StrokeAction = require 'modules/datasketch/actions/set_stroke_width'\r\n\r\n  Path = require './objects/path/object'\r\n  Group = require './objects/group/object'\r\n  ObjectBase = require './objects/base/object'   \r\n  ColorAction = require 'modules/datasketch/actions/set_color'\r\n  ObjectSummary = require 'modules/datasketch/menuitems/ObjectSummary'  \r\n\r\n  class DSCanvas extends Controller\r\n    constructor: (config) ->\r\n      config ?= {}\r\n      config.modelClass ?= Model\r\n      config.viewClass ?= View\r\n\r\n      super config\r\n\r\n      @_model.addEventListener 'Model.Change', @_onModelChange\r\n      @view().addEventListener 'Selection.Created', @_onSelectionCreated\r\n      @view().addEventListener 'Selection.Scaling', @_onSelectionScaling      \r\n      @view().addEventListener 'Selection.Modified', @_onSelectionModified\r\n      @view().addEventListener 'Selection.Cleared', @_onSelectionCleared\r\n      @view().addEventListener 'Path.Created', @_onPathCreated\r\n\r\n    render: () =>\r\n      @_view.render @_model\r\n\r\n    dryRender: () =>\r\n      @_view.dryRender()\r\n\r\n    SaveObject:() =>\r\n       Objects=this._view._fabric._objects       \r\n       localStorage.setItem(\"ObjectSave\",'{\"objects\":'+JSON.stringify(Objects)+'}');\r\n\r\n    LoadObject:()=>\r\n        debugger\r\n        @_view.LoadObjects()\r\n\r\n    getObjects: () =>\r\n      @_model.get 'objects'\r\n\r\n    getMode: () =>\r\n      @_model.get 'mode'\r\n\r\n    ModalOpen:() =>\r\n       @_view.ModalChecker()\r\n\r\n    ModalClose:() =>\r\n       @_view.ModalClose()\r\n\r\n    setMode: (mode) =>\r\n      @_model.set 'mode', mode\r\n\r\n    getStrokeWidth: () =>\r\n      @_model.get 'strokeWidth'\r\n\r\n    setStrokeWidth: (width) =>\r\n      if @_model.get 'selected'\r\n        for obj in @_model.get 'selected'\r\n          obj.setStrokeWidth width\r\n      @_model.set 'strokeWidth', width\r\n\r\n    getStrokeColor: () =>\r\n      @_model.get 'strokeColor'\r\n\r\n    setStrokeColor: (color) =>      \r\n      if @_model.get 'selected'\r\n        for obj in @_model.get 'selected'\r\n          obj.setStrokeColor color        \r\n        this.dryRender()\r\n          \r\n      if color[0].id == \"color-fill\"\r\n         @_model.set 'fillColor', color[1]\r\n      else\r\n         @_model.set 'strokeColor', color[1]      \r\n\r\n    getSelectedObjects: () =>\r\n      @_model.get 'selected'\r\n\r\n    selectObjects: (objects) =>\r\n        objectIds = (obj.getId() for obj in objects)\r\n        @_model.set 'selected', (obj for obj in @_model.getActiveObjects() when obj.getId() in objectIds)\r\n\r\n    addObject: (object, silent = false) =>\r\n      @_model.addObject object, silent\r\n\r\n    addObjects: (objects) =>\r\n      @_model.addObjects objects      \r\n      this.addObject(objects)\r\n      this.render()\r\n\r\n    #Method for adding a shape on canvas.\r\n    addShape: (shapeId) =>\r\n      @_view.addShape shapeId\r\n    \r\n    #Method for adding snaptogrid on canvas.\r\n    snaptogrid: () =>\r\n      obj = new ObjectBase\r\n      obj.onclickofcanvas 1\r\n      @_view.addGrid()\r\n    \r\n    #Method for removing grid from canvas.\r\n    removegrid: (@canvas,@Objects) =>\r\n      obj = new ObjectBase\r\n      obj.onclickofcanvas 0\r\n      @_view.removegrid(@canvas,@Objects)\r\n\r\n    removeObject: (object) =>\r\n         @_model.removeObject object\r\n\r\n    removeObjects: (objects) =>\r\n         @_model.removeObjects objects\r\n\r\n    removeSelected: () =>\r\n      @_model.removeSelected()\r\n\r\n    createGroup: (objects) =>\r\n      @_view.clearSelection()\r\n      if !objects?\r\n        objects = @_model.get 'selected'\r\n      if !objects?\r\n        return null\r\n\r\n      for obj in objects\r\n        obj.extractTransform()\r\n\r\n      group = Group.createFromObjects objects\r\n      @addObject group\r\n      @removeObjects objects\r\n      # @selectObjects [group]\r\n      group\r\n\r\n    breakGroup: (group) =>\r\n      objects = group.break()\r\n      @removeObject group\r\n      for obj in objects\r\n        @addObject obj\r\n        obj.enforceTransform()\r\n        obj.enableControls()\r\n      @render()\r\n      group.getObjects()\r\n\r\n    isolate: (group) =>\r\n      @_model.isolate group\r\n      @render()\r\n\r\n    getIsolation: () =>\r\n      @_model.get 'isolated'\r\n\r\n    setIsolation: (isolation) =>\r\n      @_model.set 'isolated', isolation\r\n\r\n    _onModelChange: (evt) =>      \r\n      switch evt.data.path\r\n        when \"strokeWidth\"\r\n          @dispatchEvent \"Canvas.StrokeWidthChange\",\r\n            width: evt.data.value\r\n        when \"mode\"\r\n          @dispatchEvent \"Canvas.ModeChange\",\r\n            mode: evt.data.value\r\n            last: evt.data.old\r\n        when \"strokeColor\"\r\n          @dispatchEvent \"Canvas.StrokeColorChange\",\r\n            color: evt.data.value\r\n        when \"fillColor\"\r\n          @dispatchEvent \"Canvas.FillColorChange\",\r\n            color: evt.data.value\r\n        when \"isolated\"\r\n          @_manageContextMenu()\r\n        when \"selected\"\r\n          @_manageContextMenu()\r\n        when \"objects\"\r\n          @render()\r\n\r\n    _manageContextMenu: () =>\r\n      Globals.get('Relay').dispatchEvent 'ContextMenu.ContextChange',\r\n        context:\r\n          selection: @_model.get('selected')\r\n          isolation: @_model.get('isolated')\r\n\r\n    _onPathCreated: (evt) =>\r\n      path = Path.createFromFabric evt.data.path\r\n      @_model.addObject path, true\r\n\r\n    _onObjectScaled: (e) =>      \r\n\r\n    _onSelectionCreated: (evt) =>  \r\n      @selectObjects (obj for obj in @_model.getActiveObjects() when obj.getId() in evt.data.objectIds)           \r\n      #mechanism for updating the value of color picker and stroke width on selection of an object.\r\n      currentTarget = if evt.currentTarget._fabric._activeObject then evt.currentTarget._fabric._activeObject else evt.currentTarget._fabric.relatedTarget\r\n\r\n      if currentTarget.type == \"line\" || currentTarget.type != \"group\"\r\n          if evt.data.objectIds.length == 1\r\n            color = []\r\n            color.push \"id\":'color-stroke'\r\n            color.push currentTarget.stroke\r\n            colorAction = new ColorAction this, color, 'color-stroke'\r\n            colorAction.execute()\r\n            color = currentTarget.stroke\r\n            $('#Stroke').next()[0].jscolor.fromString(color);\r\n            strokeaction = new StrokeAction this,currentTarget.strokeWidth\r\n            strokeaction.execute()\r\n        \r\n            if currentTarget.fill\r\n                color = []            \r\n                color.push \"id\":'color-fill'\r\n                color.push currentTarget.fill            \r\n                colorAction = new ColorAction this, color, 'color-fill'\r\n                colorAction.execute()\r\n                color = currentTarget.fill\r\n                $('#Fill').next()[0].jscolor.fromString(color);                     \r\n      \r\n      this.ObjectSummaryUpdate evt\r\n\r\n    _onSelectionModified: (evt) =>\r\n        \r\n\r\n    _onSelectionScaling: (evt) =>\r\n        this.ObjectSummaryUpdate evt      \r\n    \r\n    _onSelectionCleared: (evt) =>\r\n      @selectObjects []\r\n      #hide the properties above canvas of an active object\r\n      $('#ObjectProperties').hide()  \r\n\r\n    initCanvas: () =>\r\n      @_view.initCanvas @_model\r\n\r\n    disable: () =>\r\n      @_model.disable()\r\n\r\n    enable: () =>\r\n      @_model.enable()\r\n\r\n    disableControls: () =>\r\n      @_model.disableControls()\r\n\r\n    enableControls: () =>\r\n      @_model.enableControls()\r\n\r\n    ObjectSummaryUpdate: (evt) =>        \r\n        #mechanism for showing properties above canvas on selection of object on canvas.        \r\n        objectsummary = new ObjectSummary        \r\n        if evt.currentTarget._fabric._activeObject\r\n            if evt.currentTarget._fabric._activeObject.type != \"circle\"            \r\n                ObjectAngle = evt.currentTarget._fabric._activeObject.angle\r\n            else\r\n                ObjectAngle = evt.currentTarget._fabric._activeObject.startAngle\r\n          \r\n            objectsummary.ObjectProperty evt.currentTarget._fabric._activeObject.width * evt.currentTarget._fabric._activeObject.scaleX,evt.currentTarget._fabric._activeObject.height * evt.currentTarget._fabric._activeObject.scaleY,evt.currentTarget._fabric._activeObject.left,evt.currentTarget._fabric._activeObject.top,ObjectAngle        "]}