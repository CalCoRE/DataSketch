{"version":3,"file":"../../../../modules/core/app/application.js","sources":["modules/core/app/application.coffee"],"names":[],"mappings":"AAUA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,CAAA,GAAI,OAAA,CAAQ,QAAR;IACJ,eAAA,GAAkB,OAAA,CAAQ,uBAAR;IAClB,KAAA,GAAQ,OAAA,CAAQ,iBAAR;IACR,EAAA,GAAK,OAAA,CAAQ,yBAAR;IACL,OAAA,GAAU,OAAA,CAAQ,oBAAR;IACV,GAAA,GAAM,OAAA,CAAQ,eAAR;WAEA;;;MAKS,qBAAC,OAAD;;;;QACX,IAAC,CAAA,QAAD,GAAY,CAAA,CAAE,OAAF;QACZ,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,IAAnB;MAFW;;4BAKb,IAAA,GAAM,SAAA;AACJ,YAAA;QAAA,QAAA,GAAW;QAGX,aAAA,GAAgB,EAAE,CAAC,MAAH,CAAU,qBAAV,EAAiC,IAAI,GAArC;AAGhB;AAAA,aAAA,qCAAA;;UACE,IAAG,mBAAH;YACE,aAAa,CAAC,OAAd,CAAsB,EAAE,CAAC,QAAzB,EADF;;AADF;QAMA,IAAC,CAAA,QAAD,GAAY;AACZ;AAAA,aAAA,wCAAA;;UACE,MAAA,GAAS,IAAI;UACb,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAe,MAAf;UACA,QAAQ,CAAC,IAAT,CAAc,MAAM,CAAC,IAAP,CAAA,CAAd;AAHF;QAKA,aAAA,GAAgB,EAAE,CAAC,MAAH,CAAU,uBAAV,EAAmC,eAAnC;QAChB,QAAQ,CAAC,IAAT,CAAc,IAAI,OAAJ,CAAY,CAAA,SAAA,KAAA;iBAAA,SAAC,OAAD,EAAU,MAAV;mBAGxB,OAAA,CAAQ,CAAC,aAAD,CAAR,EAAyB,SAAC,SAAD;cACvB,KAAC,CAAA,IAAD,GAAQ,IAAI;cACZ,KAAC,CAAA,QAAQ,CAAC,MAAV,CAAiB,KAAC,CAAA,IAAI,CAAC,IAAN,CAAA,CAAjB;cACA,KAAC,CAAA,aAAD,CAAe,uBAAf,EAAwC,EAAxC;qBACA,OAAA,CAAQ,KAAC,CAAA,IAAT;YAJuB,CAAzB,EAKE,SAAC,GAAD;qBACA,MAAA,CAAO,IAAI,KAAJ,CAAU,4BAAV,CAAP;YADA,CALF;UAHwB;QAAA,CAAA,CAAA,CAAA,IAAA,CAAZ,CAAd;eAUA,OAAO,CAAC,GAAR,CAAY,QAAZ;MA9BI;;4BAmCN,IAAA,GAAM,SAAA;AACJ,YAAA;eAAA,OAAO,CAAC,GAAR;;AAAY;AAAA;eAAA,qCAAA;;yBAAA,EAAE,CAAC,IAAH,CAAA;AAAA;;qBAAZ;MADI;;4BAMN,GAAA,GAAK,SAAA;AACH,YAAA;AAAA;AAAA,aAAA,qCAAA;;UACE,EAAE,CAAC,GAAH,CAAA;AADF;eAEA,IAAC,CAAA,aAAD,CAAe,iBAAf,EAAkC,EAAlC;MAHG;;;;OAnDmB;EARrB,CAAP;AAAA","sourcesContent":["# # Application\n# \n# Base class for an application. Handles module integration.\n# \n# All modules are deal with in phases:\n# \n# * `load`: All modules are loaded\n# * `init`:\n# * `run`:\n\ndefine (require) ->\n  $ = require 'jquery'\n  EventDispatcher = require 'core/event/dispatcher'\n  Utils = require 'core/util/utils'\n  HM = require 'core/event/hook_manager'\n  Globals = require 'core/model/globals'\n  Set = require 'core/util/set'\n\n  class Application extends EventDispatcher\n# `new Application(domRoot)`\n\n# Constructor method. Accepts a single argument of the application's root\n# DOM element.\n    constructor: (domRoot) ->\n      @_domRoot = $(domRoot)\n      Globals.set 'App', @\n\n# `load()`\n    load: () =>\n      promises = []\n# First, the application invoke the `Application.Modules` hook to obtain\n# a set of all desired modules.\n      moduleClasses = HM.invoke 'Application.Modules', new Set\n# The set is then modified to ensure any first-level requirements\n# TODO: make requirements check recursive\n      for mc in moduleClasses.elements().slice(0)\n        if mc.requires?\n          moduleClasses.addMany mc.requires\n\n# Then the modules are set to load, with the promises returned from their\n# load functions stored in an array.\n      @_modules = []\n      for mc in moduleClasses.elements()\n        module = new mc\n        @_modules.push module\n        promises.push module.load()\n# Finally, the View class load promise is created and added to the array.\n      viewClassPath = HM.invoke 'Application.ViewClass', 'core/app/view'\n      promises.push new Promise (resolve, reject) =>\n# Once the View class is loaded, it is instantiated and appended to\n# the dom root.\n        require [viewClassPath], (viewClass) =>\n          @view = new viewClass\n          @_domRoot.append @view.$dom()\n          @dispatchEvent 'Application.ViewReady', {}\n          resolve(@view)\n        , (err) =>\n          reject(new Error(\"Could not load view class.\"))\n      Promise.all(promises)\n\n# `init()`\n\n# Initializes all modules.\n    init: () =>\n      Promise.all(pi.init() for pi in @_modules)\n\n# `run()`\n\n# Runs the application by running all modules.\n    run: () =>\n      for pi in @_modules\n        pi.run()\n      @dispatchEvent 'Application.Run', {}"]}