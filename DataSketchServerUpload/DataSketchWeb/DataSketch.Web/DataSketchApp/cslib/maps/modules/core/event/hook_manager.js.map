{"version":3,"file":"../../../../modules/core/event/hook_manager.js","sources":["modules/core/event/hook_manager.coffee"],"names":[],"mappings":"AAaA;AAAA,MAAA;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAM;MACS,qBAAA;;;QACX,IAAC,CAAA,MAAD,GAAU;MADC;;4BAab,IAAA,GAAM,SAAC,QAAD,EAAW,QAAX,EAAqB,OAArB;AACJ,YAAA;;UADyB,UAAU;;;cAC3B,CAAA,QAAA,IAAa;;eACrB,IAAC,CAAA,MAAO,CAAA,QAAA,CAAS,CAAC,IAAlB,CACE;UAAA,QAAA,EAAU,QAAV;UACA,OAAA,EAAS,OADT;SADF;MAFI;;4BAaN,MAAA,GAAQ,SAAC,QAAD,EAAW,OAAX,EAAoB,IAApB;AACN,YAAA;;UAD0B,OAAO;;QACjC,IAAG,6BAAH;UACE,IAAC,CAAA,MAAO,CAAA,QAAA,CAAS,CAAC,IAAlB,CAAuB,SAAC,CAAD,EAAG,CAAH;mBACrB,CAAC,CAAC,OAAF,GAAY,CAAC,CAAC;UADO,CAAvB;AAEA;AAAA,eAAA,qCAAA;;YACE,OAAA,GAAU,IAAI,CAAC,QAAQ,CAAC,IAAd,CAAmB,IAAnB,EAAyB,OAAzB,EAAkC,IAAlC;AADZ,WAHF;;AAKA,eAAO;MAND;;;;;WAQV,IAAI;EApCC,CAAP;AAAA","sourcesContent":["# HookManager\n# ===========\n\n# A static class to handle synchronous responses. The primary goal of this class\n# is to provide a standard way to allow for customization.\n\n# The main difference between hooks and events are that they are responses and\n# reactions, respectively. Events are listening for the completion of a process,\n# so that they can react appropriately. Hooks are a openings to inject code in\n# the middle of a process, to alter it in some way. As such, hooks are\n# necessarily synchronous, whereas events are not.\n\n\ndefine (require) ->\n  class HookManager\n    constructor: () ->\n      @_hooks = {}\n\n    \n# Public API\n# ----------\n\n# `hook(hookName, callback, priority = 0)`\n\n# Ties a callback to a named hook. Priority allows for fine-grained control\n# over the ordering of callbacks. High valued priority (e.g. 10.7) occurs\n# before low valued (e.g. -8).\n    \n    hook: (hookName, callback, priorty = 0) =>\n      @_hooks[hookName] ?= []\n      @_hooks[hookName].push\n        callback: callback\n        priorty: priorty\n\n    \n# `invoke(hookName, subject, args...)`\n\n# Invokes a hook by name. The `subject` argument is the object to be modified\n# and returned by the callbacks. If multiple values are required, `subject`\n# should be an object or array.\n    \n    invoke: (hookName, subject, meta = {}) =>\n      if @_hooks[hookName]?\n        @_hooks[hookName].sort (a,b) ->\n          b.priorty - a.priorty\n        for hook in @_hooks[hookName]\n          subject = hook.callback.call null, subject, meta\n      return subject\n\n  new HookManager"]}