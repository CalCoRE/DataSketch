{"version":3,"file":"../../../../../../modules/datasketch/canvas/objects/base/model.js","sources":["modules/datasketch/canvas/objects/base/model.coffee"],"names":[],"mappings":"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","sourcesContent":["define (require) ->\n  Model = require 'core/model/model'\n  Utils = require 'core/util/utils'\n\n  defaults =\n    id: null\n    position:\n      x: 0\n      y: 0\n    rotation: 0\n    scale:\n      x: 1\n      y: 1\n    controllable: true\n    disabled: false\n    selectable: true\n    opacity: 1\n    propertyMappings: []\n    isStamping:false\n\n  class CanvasObjectModel extends Model\n    constructor: (config) ->\n      config.defaults = Utils.ensureDefaults config.defaults, defaults\n      super config\n\n    getWidth: () =>\n      @get('view').getWidth()\n\n    getHeight: () =>\n      @get('view').getHeight()\n\n    disable: () =>\n      @set 'disabled', true\n      @set 'controllable', false\n    \n    selectable: (isSelectable) =>\n      @set 'selectable', isSelectable      \n\n    enable: () =>\n      @set 'disabled', false\n      @set 'controllable', true\n\n    addPropertyMapping: (map) => \n      maps = @get 'propertyMappings'\n      newMap = true\n      for m in maps when m.objectProperty == map.objectProperty\n        m.dataProperty = map.dataProperty\n        m.calibration = map.calibration\n        newMap = false\n      if newMap\n        maps.push map\n      @set 'propertyMappings', maps\n\n    removePropertyMapping: (objectProperty) =>        \n      map = @get 'propertyMappings'\n      ind = null\n      for m, i in map when m.objectProperty == objectProperty\n        ind = i\n        break\n      map.splice i, 1\n      @set 'propertyMappings', map\n\n    cacheState: () =>\n      @_cache =\n        position: Utils.ensureDefaults @get('position'), {}\n        rotation: @get 'rotation'\n        scale: Utils.ensureDefaults @get('scale'), {}\n        opacity: @get 'opacity'\n\n    restoreState: () =>      \n      if @_cache?\n        @set 'position', @_cache.position\n        @set 'rotation', @_cache.rotation\n        @set 'scale', @_cache.scale\n        @set 'opacity', @_cache.opacity\n"]}