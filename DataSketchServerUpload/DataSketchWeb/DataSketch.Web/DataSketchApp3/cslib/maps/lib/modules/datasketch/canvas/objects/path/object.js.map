{"version":3,"file":"../../../../../../../lib/modules/datasketch/canvas/objects/path/object.js","sources":["lib/modules/datasketch/canvas/objects/path/object.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,YAAA,GAAe,OAAA,CAAQ,+CAAR;IACf,KAAA,GAAQ,OAAA,CAAQ,SAAR;IACR,IAAA,GAAO,OAAA,CAAQ,QAAR;IAED;;;MACS,oBAAC,QAAD;;UAAC,WAAW;;;;;;;UACvB,QAAQ,CAAC,aAAc;;;UACvB,QAAQ,CAAC,YAAa;;QAEtB,4CAAM,QAAN;MAJW;;2BAMb,eAAA,GAAiB,SAAC,MAAD;QACf,OAAO,CAAC,GAAR,CAAY,MAAZ;QACA,IAAC,CAAA,MAAM,CAAC,WAAR,CAAoB,MAApB;QACA,IAAC,CAAA,KAAK,CAAC,SAAP,CAAiB,MAAjB,EAAyB,IAAC,CAAA,MAA1B;QAEA,IAAG,MAAM,CAAC,EAAP,KAAa,MAAhB;iBACG,MAAM,CAAC,GAAP,CAAW,IAAX,EAAiB,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,IAAZ,CAAjB,EADH;;MALe;;2BASjB,KAAA,GAAO,SAAC,WAAD;AAEL,YAAA;QAFM,IAAC,CAAA,cAAD;QAEN,IAAG,IAAC,CAAA,KAAK,CAAC,OAAO,CAAC,IAAf,KAAuB,MAA1B;iBACG,IAAC,CAAA,KAAK,CAAC,WAAP,CAAmB,IAAC,CAAA,WAApB,CACG,CAAC,IADJ,CACS,CAAA,SAAA,KAAA;mBAAA,SAAC,QAAD;AACH,kBAAA;cAAA,KAAA,GAAQ,UAAU,CAAC,gBAAX,CAA4B,QAA5B;cACR,KAAK,CAAC,YAAN,CAAmB,KAAC,CAAA,YAAD,CAAA,CAAnB;qBACA;YAHG;UAAA,CAAA,CAAA,CAAA,IAAA,CADT,EADH;SAAA,MAAA;UAOE,QAAA,GAAW,IAAC,CAAA,KAAK,CAAC,WAAP,CAAmB,IAAC,CAAA,WAApB;UACX,KAAA,GAAQ,UAAU,CAAC,gBAAX,CAA4B,QAA5B;UACR,KAAK,CAAC,YAAN,CAAmB,IAAC,CAAA,YAAD,CAAA,CAAnB;iBACA,MAVF;;MAFK;;2BAeP,cAAA,GAAgB,SAAC,KAAD;QACd,IAAG,KAAK,CAAC,OAAN,CAAc,KAAd,CAAH;UACE,IAAG,KAAM,CAAA,CAAA,CAAE,CAAC,EAAT,KAAe,YAAlB;mBACE,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,YAAZ,EAA0B,KAAM,CAAA,CAAA,CAAhC,EADF;WAAA,MAAA;mBAGE,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,cAAZ,EAA4B,KAAM,CAAA,CAAA,CAAlC,EAHF;WADF;SAAA,MAAA;iBAME,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,cAAZ,EAA4B,KAA5B,EANF;;MADc;;2BAShB,cAAA,GAAgB,SAAC,KAAD;eACd,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,cAAZ,EAA4B,KAA5B;MADc;;;;OAxCO;IA2CzB,UAAU,CAAC,gBAAX,GAA8B,SAAC,MAAD;AAC5B,UAAA;MAAA,MAAM,CAAC,SAAP,CAAA;MACA,IAAA,GAAO,IAAI;MACX,IAAI,CAAC,eAAL,CAAqB,MAArB;aACA;IAJ4B;WAM9B;EAtDK,CAAP;AAAA","sourcesContent":["define (require) ->\n  CanvasObject = require 'modules/datasketch/canvas/objects/base/object'\n  Model = require './model'\n  View = require './view'\n  \n  class PathObject extends CanvasObject\n    constructor: (settings = {}) ->\n      settings.modelClass ?= Model\n      settings.viewClass ?= View\n\n      super settings\n\n    buildFromFabric: (fabric) =>      \n      console.log fabric\n      @_model.parseFabric fabric\n      @_view.setFabric fabric, @_model\n      #Restrict fabric from set id of an object if an object is of a grid type.\n      if fabric.id != \"grid\"  \n         fabric.set 'id', @_model.get('id')\n\n    #object cloning function for making clone of an object.\n    clone: (@_ObjectType) =>\n     #Checking the type of object we have to clone for calling clone method.\n      if @_view._fabric.type == \"path\"\n         @_view.cloneFabric(@_ObjectType)\n            .then (fabClone) =>\n               clone = PathObject.createFromFabric fabClone\n               clone.setTransform @getTransform()\n               clone\n      else\n        fabClone = @_view.cloneFabric(@_ObjectType) \n        clone = PathObject.createFromFabric fabClone\n        clone.setTransform @getTransform()\n        clone\n    \n\n    setStrokeColor: (color) =>      \n      if Array.isArray(color)\n        if color[0].id == \"color-fill\"\n          @_model.set 'fill.color', color[1]            \n        else            \n          @_model.set 'stroke.color', color[1]\n      else        \n        @_model.set 'stroke.color', color\n      \n    setStrokeWidth: (width) =>\n      @_model.set 'stroke.width', width\n\n  PathObject.createFromFabric = (fabric) ->\n    fabric.setCoords()\n    path = new PathObject\n    path.buildFromFabric fabric\n    path\n\n  PathObject"]}