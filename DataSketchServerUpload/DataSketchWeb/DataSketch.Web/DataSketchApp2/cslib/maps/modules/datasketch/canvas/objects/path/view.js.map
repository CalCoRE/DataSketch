{"version":3,"file":"../../../../../../modules/datasketch/canvas/objects/path/view.js","sources":["modules/datasketch/canvas/objects/path/view.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,gBAAA,GAAmB,OAAA,CAAQ,6CAAR;IACnB,MAAA,GAAS,OAAA,CAAQ,mBAAR;WAEH;;;MACS,kBAAC,KAAD;;;;QACX,0CAAM,KAAN;MADW;;yBAGb,SAAA,GAAW,SAAC,GAAD;AACT,YAAA;QAAA,wCAAM,GAAN;AACA,gBAAO,GAAG,CAAC,IAAI,CAAC,IAAhB;AAAA,eACO,cADP;qDAEY,CAAE,WAAV,GAAwB,GAAG,CAAC,IAAI,CAAC;AAFrC,eAGO,cAHP;uDAIY,CAAE,MAAV,GAAmB,GAAG,CAAC,IAAI,CAAC;AAJhC,eAMO,YANP;YAOI,IAAG,IAAC,CAAA,OAAJ;;oBACW,CAAE,IAAV,GAAiB,GAAG,CAAC,IAAI,CAAC;;qBAC1B,IAAC,CAAA,OAAO,CAAC,SAAT,CAAA,EAFH;;AAPJ;MAFS;;yBAeX,WAAA,GAAa,SAAA,GAAA;;yBAGb,WAAA,GAAa,SAAC,WAAD;QAAC,IAAC,CAAA,cAAD;QAEZ,IAAG,IAAC,CAAA,OAAO,CAAC,IAAT,KAAiB,MAApB;iBACE,IAAI,OAAJ,CAAY,CAAA,SAAA,KAAA;mBAAA,SAAC,OAAD,EAAU,MAAV;qBACR,KAAC,CAAA,OAAO,CAAC,KAAT,CAAe,OAAf;YADQ;UAAA,CAAA,CAAA,CAAA,IAAA,CAAZ,EADF;SAAA,MAGK,IAAG,IAAC,CAAA,OAAO,CAAC,IAAT,KAAiB,MAApB;iBACH,IAAC,CAAA,OAAO,CAAC,KAAT,CAAA,EADG;;MALM;;;;OAtBQ;EAJlB,CAAP;AAAA","sourcesContent":["define (require) ->\r\n  CanvasObjectView = require 'modules/datasketch/canvas/objects/base/view'\r\n  Fabric = require 'thirdparty/fabric'\r\n\r\n  class PathView extends CanvasObjectView\r\n    constructor: (model) ->\r\n      super model\r\n\r\n    _onChange: (evt) =>\r\n      super evt      \r\n      switch evt.data.path\r\n        when \"stroke.width\"\r\n          @_fabric?.strokeWidth = evt.data.value\r\n        when \"stroke.color\"          \r\n          @_fabric?.stroke = evt.data.value\r\n        #set the value of an color of an object when fill.color event got triggered.\r\n        when \"fill.color\"          \r\n          if @_fabric\r\n             @_fabric?.fill = evt.data.value\r\n             @_fabric.setCoords()\r\n          ##@_fabric?.active = true\r\n          ##@_fabric.canvas.setActiveObject @_fabric\r\n\r\n    buildFabric: () =>\r\n\r\n    #Method got called for cloning of an object on canvas from object.coffee.\r\n    cloneFabric: (@_ObjectType) =>\r\n    #condition for checking the type of object we have to clone.\r\n      if @_fabric.type == \"path\"        \r\n        new Promise (resolve, reject) =>\r\n            @_fabric.clone resolve\r\n      else if @_fabric.type != \"path\"        \r\n        @_fabric.clone()\r\n     "]}