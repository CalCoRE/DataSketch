{"version":3,"file":"../../../../../lib/modules/core/util/set.js","sources":["lib/modules/core/util/set.coffee"],"names":[],"mappings":"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","sourcesContent":["# Set\n# ===\n\n# A mathematical set. Sets are similar to arrays, except there is no assumed\n# ordering, and they may only contain unique elements.\n\n# TODO: Use this as a polyfill for the ECMA6 Set object.\n\ndefine (require) ->\n  EventDispatcher = require 'core/event/dispatcher'\n  \n  class Set extends EventDispatcher\n    constructor: (elements = []) ->\n      @_elements = []\n      @addMany elements\n\n    \n# Public API\n# ----------\n\n# `add(element)`\n\n# Adds the element to the set. If it already exists in the set, no change is\n# made.\n    \n    add: (element) =>\n      if not @contains element\n        @_elements.push element\n        @dispatchEvent 'Set.ElementAdded', { element: element }\n      @\n\n    \n# `addMany(elements)`\n\n# Adds all members of the provided array of elements to the set.\n    \n    addMany: (elements) =>\n      for elem in elements\n        @add elem\n      @\n\n    \n# `remove(element)`\n\n# Removes the element from the set. If the element was not already there,\n# then no change is made.\n    \n    remove: (element) =>\n      if @contains element\n        @_elements.splice @_elements.indexOf(element), 1\n        @dispatchEvent 'Set.ElementRemoved', { element: element }\n      @\n\n    \n# `toggle(element)`\n\n# If the element is a memeber of the set, it is removed, and returns false.\n# Otherwise, the element is added, and returns true.\n    \n    toggle: (element) =>\n      if @contains element\n        @remove element\n      else\n        @add element\n      @contains element\n\n    \n# `empty()`\n\n# Removes all elements from the set.\n    \n    empty: () =>\n      @_elements = []\n\n    \n# `elements()`\n\n# Returns the elements of the set as an array.\n    \n    elements: () =>\n      @_elements.slice(0)\n\n    \n# `contains(element)`\n\n# Returns true if the element is in the set.\n    \n    contains: (element) =>\n      element in @_elements\n\n    \n# `intersection(set)`\n\n# Generates a new set containing all of the elements that are in both this\n# and the provided set.\n    \n    intersection: (set) =>\n      intersection = new Set\n      for element in set.elements()\n        if @contains element\n          intersection.add element\n      intersection\n\n    \n# `union(set)`\n\n# Generates a new set containing all of the elements in both this and the\n# provided set.\n    \n    union: (set) =>\n      new Set @elements().concat(set.elements())\n\n    \n# `difference(set)`\n\n# Generates a new set containing all elements that are in either this or the\n# provided set, but not both.\n    \n    difference: (set) =>\n      diff = @union(set)\n      for element in @intersection(set).elements()\n        diff.remove element\n      diff\n\n    \n# `complement(set)`\n\n# Generates a new set containing all of the elements that are in this set,\n# but not the provided one.\n    \n    complement: (set) =>\n      complement = new Set(@elements())\n      for element in @intersection(set).elements()\n        complement.remove element\n      complement\n\n    \n# `isSubsetOf(set)`\n\n# Returns true of this set is contained entirely in the provided set.\n    \n    isSubsetOf: (set) =>\n      @elements().length == @intersection(set).elements().length\n\n    equals: (set) =>\n      @isSubsetOf(set) && set.isSubsetOf(@)\n\n    cardinality: () =>\n      @elements().length"]}