{"version":3,"file":"../../../../modules/core/util/matrix.js","sources":["modules/core/util/matrix.coffee"],"names":[],"mappings":"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","sourcesContent":["define () ->\n  MatrixUtils =\n    multiplyTransformMatrices: (matrices...) ->\n      ms = matrices.slice(0)\n      ms.reduce (prev, curr, ind, arr) ->\n        result = []\n        for row in [0..2]\n          result[row] = []\n          for col in [0..2]\n            sum = 0\n            for k in [0..2]\n              sum += prev[row][k] * curr[k][col]\n            result[row][col] = sum\n        result\n\n    determinant: (mtx) ->\n      size = mtx.length\n      m = MatrixUtils._toLetters mtx\n      if size == 2\n        m.a * m.d - m.b * m.c \n        mtx[0][0] * mtx[1][1] - mtx[0][1] * mtx[1][0]\n      if size == 3\n        m.a * m.e * m.i + m.b * m.f * m.g + m.c * m.d * m.h - m.a * m.f * m.h - m.b * m.d * m.i - m.c * m.e * m.g\n\n    invert: (mtx) ->\n      det = MatrixUtils.determinant mtx\n      m = MatrixUtils._toLetters mtx\n      inverse = [\n        [(m.e * m.i - m.f * m.h), (m.c * m.h - m.b * m.i), (m.b * m.f - m.c * m.e)]\n        [(m.f * m.g - m.d * m.i), (m.a * m.i - m.c * m.g), (m.c * m.d - m.a * m.f)]\n        [(m.d * m.h - m.e * m.g), (m.b * m.g - m.a * m.h), (m.a * m.e - m.b * m.d)]\n      ]\n      for r in [0..2]\n        for c in [0..2]\n          inverse[r][c] *= det\n      inverse\n\n    _toLetters: (mtx) ->\n      size = mtx.length\n      if size == 2\n        letters =\n          a: mtx[0][0]\n          b: mtx[0][1]\n          c: mtx[1][0]\n          d: mtx[1][1]\n      if size == 3\n        letters =\n          a: mtx[0][0]\n          b: mtx[0][1]\n          c: mtx[0][2]\n          d: mtx[1][0]\n          e: mtx[1][1]\n          f: mtx[1][2]\n          g: mtx[2][0]\n          h: mtx[2][1]\n          i: mtx[2][2]\n      letters"]}