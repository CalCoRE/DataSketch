@model DataSketch.Models.SetUpSchooolModel
@Html.AntiForgeryToken()
<div class="col-lg-4 b-r">
    <div class="form-group">
        <div class="col-lg-12">
            <label>Standard</label>
            @Html.DropDownListFor(model => model.Standard.StandardId, new SelectList(Model.lstStandard, "StandardId", "Standard"), "Select Standard", new { @class = "form-control", @id = "ddlStandardClass" })
            @Html.ValidationMessageFor(model => model.Standard.StandardId)
        </div>
    </div>
    <div class="form-group">
        <div class="col-lg-12">
            <label>Class Name</label>
            @Html.TextBoxFor(model => model.Class.ClassName, new { @id = "txtClassName", @class = "form-control", @placeholder = "Class", Value = Model.Class != null ? Model.Class.ClassName : string.Empty, autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.Class.ClassName, null, new { @class = "redfont" })
            @Html.HiddenFor(model => model.Class.ClassId, new { id = "hfClassId", @name = "hfClassId" })
            @Html.HiddenFor(model => model.isEditAction, new { id = "hfIsEditAction", @name = "hfIsEditAction" })
            @Html.HiddenFor(model => model.oldClassId, new { id = "hfOldClassId", @name = "hfOldClassId" })
            @Html.HiddenFor(model => model.oldStandardId, new { id = "hfOldStandardId", @name = "hfOldStandardId" })
        </div>
    </div>

    @Html.ValidationSummary(true)
    <div class="form-group">
        <div class="col-lg-12">
            <button style="margin-left:5px" class="btn btn-white arrow" type="reset">Reset</button>
            <button id="btnAddClass" class="btn btn-primary arrow" onclick="validateForm('ManageClassStandard')" type="submit">Submit</button>
        </div>
    </div>
</div>
<div class="col-lg-8">
    <div class="table-responsive">
        <div class="col-lg-3" style="float:left;padding:initial;">
            @Html.DropDownListFor(model => model.StandardId, new SelectList(Model.lstStandard, "StandardId", "Standard"), "Select Standard", new { @class = "form-control", @id = "ddlStandardClassId", onchange = "FilterClass()" })
        </div>
        <table id="tblClass" class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th>Class Name</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.lstClass != null)
                {
                    for (int i = 0; i < Model.lstClass.Count; i++)
                    {
                        <tr class="gradeX">
                            <td>
                                @Html.DisplayFor(model => model.lstClass[i].ClassName)
                            </td>
                            <td class="text-center">
                                @{ int Active = Model.lstClass[i].IsActive ? 1 : 0; }
                                <a onclick="ActiveInactiveClass(@Model.StandardId,@Model.lstClass[i].ClassId,@Active)"><i class='@(@Model.lstClass[i].IsActive == true ? "fa fa-check fa-x text-navy" : "fa fa-x fa-times-circle-o text-danger")'></i></a>
                                <a onclick="EditClass(@Model.lstClass[i].ClassId, '@Model.lstClass[i].ClassName')">
                                    <i class="fa fa-edit text-success"></i>
                                </a>
                                <a onclick="DeleteClass(@Model.StandardId,@Model.lstClass[i].ClassId)">
                                    <i class="fa fa-trash text-danger"></i>
                                </a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>



<script type="text/javascript">
    $(function () {
        debugger
        InitTypeahead("#txtClassName", "#hfClassId", "Class", "ClassId", "ClassName");
        var Message = '@Model.toasterObject.Message';
        if (Message != "") {
            toastr['success'](Message);
        }        
    });

    function InitTypeahead(controlId, hfId, forWhat, primaryKey, primaryValue) {
        $(controlId).typeahead({
            hint: true,
            highlight: true,
            minLength: 2,
            source: function (request, response) {
                $.ajax({
                    url: 'AutoComplete',
                    data: "{ 'prefix': '" + request + "', 'forWhat': '" + forWhat + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        items = [];
                        map = {};
                        $.each(data, function (i, item) {
                            var id = item[primaryKey];
                            var name = item[primaryValue];
                            map[name] = { id: id, name: name };
                            items.push(name);
                        });
                        response(items);
                        $(".dropdown-menu").css("height", "auto");
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            updater: function (item) {
                $(hfId).val(map[item].id);
                return item;
            }
        });
    }
</script>