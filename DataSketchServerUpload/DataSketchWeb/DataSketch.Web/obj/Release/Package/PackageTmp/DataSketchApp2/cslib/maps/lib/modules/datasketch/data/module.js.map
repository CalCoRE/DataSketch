{"version":3,"file":"../../../../../lib/modules/datasketch/data/module.js","sources":["lib/modules/datasketch/data/module.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,MAAA,GAAS,OAAA,CAAQ,iBAAR;IACT,OAAA,GAAU,OAAA,CAAQ,oBAAR;IACV,SAAA,GAAY,OAAA,CAAQ,sBAAR;IAEZ,SAAA,GAAY,OAAA,CAAQ,oBAAR;IACZ,aAAA,GAAgB,OAAA,CAAQ,eAAR;IAChB,cAAA,GAAiB,OAAA,CAAQ,oCAAR;IACjB,EAAA,GAAK,OAAA,CAAQ,yBAAR;IAEL,OAAA,CAAQ,kBAAR;WAEM;;;;;;;;;;;;;;uBACJ,UAAA,GAAY,SAAA,GAAA;;uBAEZ,WAAA,GAAa,SAAA;AACX,YAAA;QAAA,IAAA,GAAO,sCAAA;QACP,IAAI,CAAC,IAAL,CAAU,OAAA,GAAQ,MAAM,CAAC,gBAAgB,CAAC,UAA1C;eACA;MAHW;;uBAKb,aAAA,GAAe,SAAC,GAAD;AACb,YAAA;QAAA,CAAA,GAAI,SAAS,CAAC,KAAV,CAAgB,GAAhB,EACF;UAAA,MAAA,EAAQ,IAAR;UACA,aAAA,EAAe,IADf;SADE;QAIJ,EAAA,GAAK,IAAI,SAAJ,CACH;UAAA,IAAA,EAAM,CAAC,CAAC,IAAR;UACA,UAAA,EAAY,CAAC,CAAC,IAAI,CAAC,MADnB;SADG;eAIL,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAyB,EAAzB;MATa;;uBAWf,IAAA,GAAM,SAAA;QACJ,EAAE,CAAC,IAAH,CAAQ,eAAR,EAAyB,IAAC,CAAA,aAA1B;eACA,EAAE,CAAC,IAAH,CAAQ,4BAAR,EAAsC,IAAC,CAAA,sBAAvC;MAFI;;uBAIN,aAAA,GAAe,SAAC,IAAD,EAAO,IAAP;QACb,IAAG,IAAI,CAAC,EAAL,KAAW,MAAd;UACE,IAAI,CAAC,IAAL,CAAU,IAAI,cAAJ,CAAmB,MAAnB,CAAV,EADF;;eAEA;MAHa;;uBAKf,GAAA,GAAK,SAAA;QACH,IAAC,CAAA,KAAD,GAAS,IAAI,aAAJ,CAAkB,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAlB;QACT,OAAO,CAAC,GAAR,CAAY,UAAZ,CAAuB,CAAC,QAAxB,CAAiC,IAAC,CAAA,KAAlC;eAEA,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,CAAC,gBAAtB,CAAuC,mBAAvC,EAA4D,IAAC,CAAA,aAA7D;MAJG;;uBAML,aAAA,GAAe,SAAC,GAAD;QACb,IAAG,GAAG,CAAC,aAAa,CAAC,OAAlB,CAAA,CAAA,KAA+B,MAAlC;UACE,IAAC,CAAA,KAAK,CAAC,IAAP,CAAA;iBACA,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,CAAC,OAAtB,CAAA,EAFF;SAAA,MAAA;UAIE,IAAC,CAAA,KAAK,CAAC,IAAP,CAAA;iBACA,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,CAAC,MAAtB,CAAA,EALF;;MADa;;uBAQf,sBAAA,GAAwB,SAAC,IAAD,EAAO,IAAP;QACtB,IAAA,GAAO,IAAI,CAAC,MAAL,CAAY,OAAO,CAAC,GAAR,CAAY,sBAAZ,CAAZ;eACP;MAFsB;;;;OA1CL;EAZhB,CAAP;AAAA","sourcesContent":["define (require) ->\n  Module = require 'core/app/module'\n  Globals = require 'core/model/globals'\n  PapaParse = require 'thirdparty/papaparse'\n\n  DataStore = require './models/datastore'\n  DataTableView = require './views/table'\n  ModeSelectTool = require 'modules/datasketch/tools/mode/tool'\n  HM = require 'core/event/hook_manager'\n\n  require 'link!./style.css'\n\n  class DSData extends Module\n    constuctor: () ->\n\n    listPreload: () =>\n      list = super()\n      list.push \"text!#{window.DataSketchConfig.dataSource}\"\n      list\n\n    handlePreload: (csv) =>\n      d = PapaParse.parse csv,\n        header: true\n        dynamicTyping: true\n\n      ds = new DataStore\n        rows: d.data\n        properties: d.meta.fields\n\n      Globals.set 'DataStore', ds\n\n    init: () =>\n      HM.hook 'Toolbar.Tools', @_toolbarTools\n      HM.hook 'DataMapping.DataProperties', @_listMappingProperties\n\n    _toolbarTools: (list, meta) =>\n      if meta.id is \"mode\"\n        list.push new ModeSelectTool \"data\"\n      list\n\n    run: () =>\n      @_view = new DataTableView Globals.get('DataStore')\n      Globals.get('App.view').addChild @_view\n\n      Globals.get('Canvas').addEventListener 'Canvas.ModeChange', @_onModeChange\n\n    _onModeChange: (evt) =>\n      if evt.currentTarget.getMode() == \"data\"\n        @_view.show()\n        Globals.get('Canvas').disable()\n      else\n        @_view.hide()\n        Globals.get('Canvas').enable()\n\n    _listMappingProperties: (list, meta) =>\n      list = list.concat Globals.get 'DataStore.properties'\n      list\n"]}