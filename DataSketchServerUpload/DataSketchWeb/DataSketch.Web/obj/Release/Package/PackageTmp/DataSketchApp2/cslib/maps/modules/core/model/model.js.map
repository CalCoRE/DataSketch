{"version":3,"file":"../../../../modules/core/model/model.js","sources":["modules/core/model/model.coffee"],"names":[],"mappings":"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","sourcesContent":["# Model\n# =====\n\n# A base class for models. Provides support for default-driven models\n\ndefine (require) ->\n  EventDispatcher = require 'core/event/dispatcher'\n  Utils = require 'core/util/utils'\n\n  defaults =\n    data: {}\n    defaults: {}\n\n  class Model extends EventDispatcher\n    \n# `new Model({data: {}, defaults: {}})`\n\n# The constructor accepts two parameters, the desired data object and the default\n# data object. The merge of these two gets set to the private `@_data` attribute.\n    \n    constructor: (settings) ->\n      settings = Utils.ensureDefaults(settings, defaults)\n      @_data = Utils.ensureDefaults(settings.data, settings.defaults)\n\n    \n# Public API\n# ----------\n\n# `get(path, trace = false)`\n\n# Returns the value found in `path`.\n\n# This method drills down into `@_data` along the specified dot-separated path.\n    \n    get: (path, trace = false) =>\n      parts = path.split '.'\n      target = @_data\n\n      targets = [target] if trace\n      for part in parts\n        if target.get? and target.get(part)?\n          target = target.get part\n        else if target[part]?\n          target = target[part]\n        else\n          target = null\n          break\n        targets.push target if trace\n\n      if trace\n        targets\n      else\n        target\n    \n    \n# `set(path, value)`\n\n# Sets the value to the provided dot-separated path. If elements of the path do\n# not currently exist, they are created as objects.\n    \n    set: (path, value, forceEvent = false) =>\n      if value != @get(path)\n        paths = path.split('.')\n        target = @_data\n\n        for part, i in paths\n          if i == paths.length - 1\n            if target.set?\n              old = target.get(part)\n              target.set(part, value)\n            else\n              old = target[part]\n              if value == null\n                target[part] = null\n                delete target[part]\n              else\n                target[part] = value\n            @dispatchEvent 'Model.Change', { path: path, value: value, old: old }, true\n          else\n            if target.get?\n              if !target.get(part)\n                target.set(part, {})\n              target = target.get(part)\n            else\n              if !target[part]?\n                target[part] = {}\n              target = target[part]\n      else if forceEvent or value instanceof Array\n        @dispatchEvent 'Model.Change', { path: path, value: value }, true \n\n    \n# `update(data)`\n\n# Wholesale update of the model's data. This will only overwrite the keys defined\n# by the provided update data object, and will not remove unrelated data.\n    \n    update: (data) =>\n      for key, val of data\n        if key == \"id\" and @_data.id?\n          continue\n        @_data[key] = val\n      @dispatchEvent 'Model.Change', { path: null, value: data }, true\n\n    \n\n# Events\n# ------\n\n# `Model.Change`\n\n# Fires whenever a value in the model is changed via the `set` method.\n\n"]}