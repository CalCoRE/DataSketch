{"version":3,"sources":["modules/core/util/parent.coffee"],"names":[],"mappings":"AAMA;AAAA,MAAA;;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,eAAA,GAAkB,OAAA,CAAQ,uBAAR;WAEZ;;;MACS,gBAAA;;;QACX,yCAAA,SAAA;QACA,IAAC,CAAA,SAAD,GAAa;MAFF;;uBAab,QAAA,GAAU,SAAC,KAAD;QACR,IAAG,aAAa,IAAC,CAAA,SAAd,EAAA,KAAA,KAAH;UACE,IAAmC,KAAK,CAAC,MAAzC;YAAA,KAAK,CAAC,MAAM,CAAC,WAAb,CAAyB,KAAzB,EAAA;;UACA,KAAK,CAAC,MAAN,GAAe;UACf,KAAK,CAAC,gBAAN,CAAuB,GAAvB,EAA4B,IAAC,CAAA,WAA7B;UACA,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,KAAhB;UACA,IAAC,CAAA,aAAD,CAAe,mBAAf,EAAoC;YAAE,KAAA,EAAO,KAAT;WAApC,EAAsD,IAAtD,EALF;;eAMA;MAPQ;;uBAeV,WAAA,GAAa,SAAC,KAAD;QACX,IAAG,aAAS,IAAC,CAAA,SAAV,EAAA,KAAA,MAAH;UACE,KAAK,CAAC,MAAN,GAAe;UACf,KAAK,CAAC,mBAAN,CAA0B,GAA1B,EAA+B,IAAC,CAAA,WAAhC;UACA,IAAC,CAAA,SAAS,CAAC,MAAX,CAAkB,IAAC,CAAA,SAAS,CAAC,OAAX,CAAmB,KAAnB,CAAlB,EAA6C,CAA7C;UACA,IAAC,CAAA,aAAD,CAAe,qBAAf,EAAsC;YAAE,KAAA,EAAO,KAAT;WAAtC,EAAwD,IAAxD,EAJF;;eAKA;MANW;;;;OA7BM;EAHhB,CAAP;AAAA","file":"modules/core/util/parent.js","sourceRoot":"/source/","sourcesContent":["# Parent\n# ======\n\n# A generic container class. Parents maintain an array of children, and they\n# bubble any events that their children fire.\n\ndefine (require) ->\n  EventDispatcher = require 'core/event/dispatcher'\n\n  class Parent extends EventDispatcher\n    constructor: () ->\n      super\n      @_children = []\n\n    \n# Public API\n# ----------\n\n# `addChild(child)`\n\n# Adds the provided child to the parent's list of children. If the child belonged\n# to a different parent, that relationship is dropped in favor of the new one.\n    \n    addChild: (child) =>\n      if child not in @_children\n        child.parent.removeChild(child) if child.parent\n        child.parent = @\n        child.addEventListener '*', @bubbleEvent\n        @_children.push child\n        @dispatchEvent 'Parent.ChildAdded', { child: child }, true\n      @\n\n    \n# `removeChild(child)`\n\n# Removes the specified child from teh parent's list of children. This also drops\n# the event bubbler.\n    \n    removeChild: (child) =>\n      if child in @_children\n        child.parent = null\n        child.removeEventListener '*', @bubbleEvent\n        @_children.splice @_children.indexOf(child), 1\n        @dispatchEvent 'Parent.ChildRemoved', { child: child }, true\n      @\n\n    \n# Events\n# ------\n\n# `Parent.ChildAdded`\n\n# Fires whenever a child is added. Data payload contains the `child` in question.\n\n# `Parent.ChildRemoved`\n\n# Fires whenever a child is removed. Data payload contains the `child` in\n# question.\n"]}