{"version":3,"sources":["modules/core/util/geom.coffee"],"names":[],"mappings":"AAAA;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;WAAA,IAAA,GAOE;MAAA,mBAAA,EAAqB,SAAC,CAAD,EAAI,CAAJ;AACnB,YAAA;QAAA,KAAA,GACE;UAAA,CAAA,EAAM,CAAC,CAAC,KAAF,GAAU,CAAb,GAAoB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,KAA5B,GAAuC,CAAC,CAAC,CAA5C;UACA,CAAA,EAAM,CAAC,CAAC,MAAF,GAAW,CAAd,GAAqB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,MAA7B,GAAyC,CAAC,CAAC,CAD9C;UAEA,KAAA,EAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAX,CAFP;UAGA,MAAA,EAAQ,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,MAAX,CAHR;;QAIF,KAAA,GACE;UAAA,CAAA,EAAM,CAAC,CAAC,KAAF,GAAU,CAAb,GAAoB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,KAA5B,GAAuC,CAAC,CAAC,CAA5C;UACA,CAAA,EAAM,CAAC,CAAC,MAAF,GAAW,CAAd,GAAqB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,MAA7B,GAAyC,CAAC,CAAC,CAD9C;UAEA,KAAA,EAAO,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAX,CAFP;UAGA,MAAA,EAAQ,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,MAAX,CAHR;;QAKF,WAAA,GAAc,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,CAAX,EAAc,CAAC,CAAC,CAAhB;QACd,WAAA,GAAc,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,KAAjB,EAAwB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,KAAhC;QACd,WAAA,GAAc,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,CAAX,EAAc,CAAC,CAAC,CAAhB;QACd,WAAA,GAAc,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,MAAjB,EAAyB,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,MAAjC;QAEd,IAAG,WAAA,GAAc,WAAd,IAA6B,WAAA,GAAc,WAA9C;iBACE,KADF;SAAA,MAAA;iBAGE,OAAA,GACE;YAAA,CAAA,EAAG,WAAH;YACA,CAAA,EAAG,WADH;YAEA,KAAA,EAAO,WAAA,GAAc,WAFrB;YAGA,MAAA,EAAQ,WAAA,GAAc,WAHtB;YAJJ;;MAjBmB,CAArB;MA0BA,sBAAA,EAAwB,SAAC,IAAD,EAAO,EAAP;AACtB,YAAA;eAAA,CAAA,IAAI,CAAC,CAAL,WAAU,EAAE,CAAC,EAAb,OAAA,IAAkB,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,KAAhC,CAAA,IAA0C,CAAA,IAAI,CAAC,CAAL,YAAU,EAAE,CAAC,EAAb,QAAA,IAAkB,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,MAAhC;MADpB,CA1BxB;;EARG,CAAP;AAAA","file":"modules/core/util/geom.js","sourceRoot":"/source/","sourcesContent":["define (require) ->\n  Geom =\n\n# `getRectangleOverlap(a, b)`\n#\n# Takes two rectangle objects ({x, y, width, height}) and returns a rectangle\n# object defining their overlap. If the rectangles do not overlap at all, `null`\n# is returned.\n    getRectangleOverlap: (a, b) ->\n      aNorm =\n        x: if a.width < 0 then a.x + a.width else a.x\n        y: if a.height < 0 then a.y + a.height else a.y\n        width: Math.abs(a.width)\n        height: Math.abs(a.height)\n      bNorm =\n        x: if b.width < 0 then b.x + b.width else b.x\n        y: if b.height < 0 then b.y + b.height else b.y\n        width: Math.abs(b.width)\n        height: Math.abs(b.height)\n\n      hOverlapMin = Math.max a.x, b.x\n      hOverlapMax = Math.min a.x + a.width, b.x + b.width\n      vOverlapMin = Math.max a.y, b.y\n      vOverlapMax = Math.min a.y + a.height, b.y + b.height\n\n      if hOverlapMin > hOverlapMax or vOverlapMin > vOverlapMax\n        null\n      else\n        overlap =\n          x: hOverlapMin\n          y: vOverlapMin\n          width: hOverlapMax - hOverlapMin\n          height: vOverlapMax - vOverlapMin\n\n    rectangleContainsPoint: (rect, pt) ->\n      rect.x <= pt.x <= rect.x + rect.width and rect.y <= pt.y <= rect.y + rect.height"]}