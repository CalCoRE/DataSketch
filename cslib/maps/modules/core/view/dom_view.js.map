{"version":3,"sources":["modules/core/view/dom_view.coffee"],"names":[],"mappings":"AAKA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,IAAA,GAAO,OAAA,CAAQ,QAAR;IACP,CAAA,GAAI,OAAA,CAAQ,QAAR;WAEE;;;MAgBS,iBAAC,IAAD;;;;;;;;QACX,uCAAA;QACA,IAAC,CAAA,GAAD,GAAU,OAAO,IAAP,KAAe,QAAlB,GAAgC,CAAA,CAAE,CAAC,CAAC,SAAF,CAAY,IAAZ,CAAF,CAAhC,GAA0D,CAAA,CAAE,IAAF;MAFtD;;wBAcb,QAAA,GAAU,SAAC,KAAD,EAAQ,WAAR;AACR,YAAA;QAAA,sCAAM,KAAN;QACA,MAAA,GAAY,mBAAH,GAAqB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,WAAV,CAAsB,CAAC,KAAvB,CAAA,CAArB,GAAyD,IAAC,CAAA;eACnE,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,IAAN,CAAA,CAAd;MAHQ;;wBAWV,WAAA,GAAa,SAAC,KAAD;QACX,yCAAM,KAAN;QACA,IAAG,CAAC,CAAC,QAAF,CAAW,IAAC,CAAA,GAAD,CAAA,CAAX,EAAmB,KAAK,CAAC,GAAN,CAAA,CAAnB,CAAH;iBAKE,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,MAAb,CAAA,EALF;;MAFW;;wBAeb,IAAA,GAAM,SAAA;eACJ,IAAC,CAAA;MADG;;wBAQN,GAAA,GAAK,SAAA;eACH,IAAC,CAAA,GAAI,CAAA,CAAA;MADF;;wBAOL,IAAA,GAAM,SAAA;eACJ,IAAC,CAAA,GAAG,CAAC,IAAL,CAAA;MADI;;wBAON,IAAA,GAAM,SAAA;eACJ,IAAC,CAAA,GAAG,CAAC,IAAL,CAAA;MADI;;wBAaN,MAAA,GAAQ,SAAA;AACN,YAAA;QAAA,MAAA,GAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAA;QACT,MAAM,CAAC,KAAP,GAAe,IAAC,CAAA,GAAG,CAAC,UAAL,CAAA;QACf,MAAM,CAAC,MAAP,GAAgB,IAAC,CAAA,GAAG,CAAC,WAAL,CAAA;eAChB;MAJM;;;;OA3FY;EAJjB,CAAP;AAAA","file":"modules/core/view/dom_view.js","sourceRoot":"/source/","sourcesContent":["# DomView\n# =======\n#\n# Base class for HTML templated views.\n\ndefine (require) ->\n  View = require './view'\n  $ = require 'jquery'\n\n  class DomView extends View\n    \n# `new DomView(template)`\n#\n# Creates a new DomView with the provided template. The template is expected to\n# be one of two formats: either an HTML string, or a jQuery object.\n#\n# Typical class extension is as follows:\n#\n#     define (require) ->\n#       template = require 'text!templates/path/to/template.html'\n# \n#       class ThingView extends DomView\n#         constructor: () ->\n#           super template\n    \n    constructor: (tmpl) ->\n      super()\n      @$el = if typeof tmpl is \"string\" then $($.parseHTML(tmpl)) else $(tmpl)\n    \n    \n# Public API\n# ----------\n\n# `addChild(child, destination)`\n#\n# Defers to the parent class (ultimately, the Parent class) to handle general\n# child management, and appends the child dom to this view's dom, at the\n# destination if provided.\n    \n    addChild: (child, destination) =>\n      super child\n      target = if destination? then @$el.find(destination).first() else @$el\n      target.append child.$dom()\n\n    \n# `removeChild(child)`\n#\n# Defers to the parent class (ultimately, the Parent class) to handle general\n# child management, and removes the child dom from this view's dom.\n    \n    removeChild: (child) =>\n      super child\n      if $.contains(@dom(), child.dom())\n        \n# We use jQuery's detach method in order to retain any event listeners \n# the child may have set on its own dom.\n        \n        child.$dom().detach()\n\n    \n# `$dom()`\n#\n# Returns the jQuery object wrapped around the view's dom. Replaced the previous,\n# confusing `view()` method (there was a lot of view.view()).\n    \n    $dom: () =>\n      @$el\n\n    \n# `dom()`\n#\n# Returns the core DOM object of the view.\n    \n    dom: () =>\n      @$el[0]\n\n# `show()`\n#\n# Reveals the dom element. Currently utilizes jQuery's own show() method.\n\n    show: () =>\n      @$el.show()\n\n# `hide()`\n#\n# Reveals the dom element. Currently utilizes jQuery's own hide() method.\n\n    hide: () =>\n      @$el.hide()\n\n# `bounds()`\n#\n# Returns an object containing the bounds of the element, in the following form:\n\n#     {\n#       left: (float)\n#       top: (float)\n#       width: (float)\n#       height: (float)\n#     }\n    bounds: () =>\n      bounds = @$el.offset()\n      bounds.width = @$el.outerWidth()\n      bounds.height = @$el.outerHeight()\n      bounds"]}