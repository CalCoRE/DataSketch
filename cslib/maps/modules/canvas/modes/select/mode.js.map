{"version":3,"sources":["modules/canvas/modes/select/mode.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,eAAA,GAAkB,OAAA,CAAQ,uBAAR;IAClB,EAAA,GAAK,OAAA,CAAQ,yBAAR;IACL,SAAA,GAAY,OAAA,CAAQ,yCAAR;WAEN;;;MACS,0BAAA;;;;;;QACX,gDAAA;MADW;;iCAGb,QAAA,GAAU,SAAC,MAAD;eACR,IAAC,CAAA,OAAD,GAAW;MADH;;iCAGV,UAAA,GAAY,SAAC,MAAD;eACV,IAAC,CAAA,OAAD,GAAW;MADD;;iCAGZ,WAAA,GAAa,SAAC,KAAD;AAIX,YAAA;QAAA,IAAC,CAAA,UAAD,GAAc;QACd,QAAA,GAAW,EAAE,CAAC,MAAH,CAAU,2BAAV,EACT;UAAA,IAAA,EAAM,mBAAN;UACA,MAAA,EACE;YAAA,KAAA,EAAO,CAAP;YACA,KAAA,EAAO,mBADP;WAFF;SADS;QAMX,IAAC,CAAA,QAAD,GAAY,SAAS,CAAC,MAAV,CACV;UAAA,QAAA,EAAU,KAAV;UACA,IAAA,EAAM,QAAQ,CAAC,IADf;UAEA,MAAA,EAAQ,QAAQ,CAAC,MAFjB;SADU;eAIZ,IAAC,CAAA,OAAO,CAAC,SAAT,CAAmB,IAAC,CAAA,QAApB,EAA8B,MAA9B;MAfW;;iCAiBb,UAAA,GAAY,SAAC,KAAD;AAEV,YAAA;QAAA,KAAA,GAAQ,KAAK,CAAC,CAAN,GAAU,IAAC,CAAA,UAAU,CAAC;QAC9B,MAAA,GAAS,KAAK,CAAC,CAAN,GAAU,IAAC,CAAA,UAAU,CAAC;QAC/B,IAAC,CAAA,QAAQ,CAAC,KAAV,CAAgB,KAAhB;QACA,IAAC,CAAA,QAAQ,CAAC,MAAV,CAAiB,MAAjB;QACA,IAAC,CAAA,QAAQ,CAAC,CAAV,CAAY,IAAC,CAAA,UAAU,CAAC,CAAZ,GAAgB,KAAA,GAAQ,CAApC;eACA,IAAC,CAAA,QAAQ,CAAC,CAAV,CAAY,IAAC,CAAA,UAAU,CAAC,CAAZ,GAAgB,MAAA,GAAS,CAArC;MAPU;;iCASZ,SAAA,GAAW,SAAA;AAET,YAAA;QAAA,CAAA,GAAI,IAAC,CAAA,QAAQ,CAAC,OAAV,CAAA;QACJ,IAAG,CAAC,CAAC,KAAF,KAAW,CAAX,IAAiB,CAAC,CAAC,MAAF,KAAY,CAAhC;UACE,SAAA,GAAY,IAAC,CAAA,OAAO,CAAC,oBAAT,CAA8B,CAA9B;UACZ,IAAG,SAAS,CAAC,MAAb;YACE,SAAA,GAAY,CAAC,SAAU,CAAA,CAAA,CAAX,EADd;WAFF;SAAA,MAAA;UAKE,SAAA,GAAY,IAAC,CAAA,OAAO,CAAC,wBAAT,CAAkC,CAAlC,EALd;;QAOA,IAAC,CAAA,OAAO,CAAC,aAAT,CAAuB,SAAvB;eAGA,IAAC,CAAA,OAAO,CAAC,YAAT,CAAsB,IAAC,CAAA,QAAvB,EAAiC,MAAjC;MAbS;;;;OApCkB;EAL1B,CAAP;AAAA","file":"modules/canvas/modes/select/mode.js","sourceRoot":"/source/","sourcesContent":["define (require) ->\n  EventDispatcher = require 'core/event/dispatcher'\n  HM = require 'core/event/hook_manager'\n  Rectangle = require 'modules/canvas/objects/rectangle/object'\n\n  class CanvasSelectMode extends EventDispatcher\n    constructor: () ->\n      super()\n\n    activate: (canvas) =>\n      @_canvas = canvas\n\n    deactivate: (canvas) =>\n      @_canvas = null\n\n    actionStart: (point) =>\n      # determine appropriate action\n\n      # create a selection box\n      @_reference = point\n      settings = HM.invoke \"Canvas.Selection.Settings\",\n        fill: \"rgba(0,0,255,0.2)\"\n        stroke:\n          width: 1\n          color: \"rgba(0,0,255,0.5)\"\n\n      @_selRect = Rectangle.create\n        position: point\n        fill: settings.fill\n        stroke: settings.stroke\n      @_canvas.addObject @_selRect, \"meta\"\n\n    actionMove: (point) =>\n      # adjust selection box\n      width = point.x - @_reference.x\n      height = point.y - @_reference.y\n      @_selRect.width width\n      @_selRect.height height\n      @_selRect.x @_reference.x + width / 2\n      @_selRect.y @_reference.y + height / 2\n\n    actionEnd: () =>\n      # select objects overlapping with box\n      r = @_selRect.getRect()\n      if r.width == 0 and r.height == 0\n        selection = @_canvas.getObjectsUnderPoint(r)\n        if selection.length\n          selection = [selection[0]]\n      else\n        selection = @_canvas.getObjectsUnderRectangle r\n\n      @_canvas.selectObjects selection\n\n      # remove selection rectangle\n      @_canvas.removeObject @_selRect, \"meta\"\n"]}