{"version":3,"sources":["modules/canvas/objects/path/view.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,UAAA,GAAa,OAAA,CAAQ,oCAAR;WAEP;;;MACS,kBAAC,KAAD;;QACX,0CAAM,KAAN;MADW;;yBAGb,IAAA,GAAM,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;AACJ,YAAA;QAAA,GAAG,CAAC,SAAJ,CAAA;AACA;AAAA,aAAA,qCAAA;;AACE,kBAAO,CAAC,CAAC,OAAT;AAAA,iBACO,QADP;cAEI,GAAG,CAAC,MAAJ,CAAW,CAAC,CAAC,IAAI,CAAC,CAAlB,EAAqB,CAAC,CAAC,IAAI,CAAC,CAA5B;AADG;AADP,iBAGO,QAHP;cAII,GAAG,CAAC,MAAJ,CAAW,CAAC,CAAC,IAAI,CAAC,CAAlB,EAAqB,CAAC,CAAC,IAAI,CAAC,CAA5B;AAJJ;AADF;QAMA,IAAG,KAAK,CAAC,GAAN,CAAU,WAAV,CAAH;iBACE,GAAG,CAAC,SAAJ,CAAA,EADF;;MARI;;;;OAJe;EAHlB,CAAP;AAAA","file":"modules/canvas/objects/path/view.js","sourceRoot":"/source/","sourcesContent":["define (require) ->\n  VectorView = require 'modules/canvas/objects/vector/view'\n\n  class PathView extends VectorView\n    constructor: (model) ->\n      super model\n\n    draw: (ctx, model, timeDelta) =>\n      ctx.beginPath()\n      for d in model.get('pathData')\n        switch d.command\n          when 'moveTo'\n            ctx.moveTo d.data.x, d.data.y\n          when 'lineTo'\n            ctx.lineTo d.data.x, d.data.y\n      if model.get('autoclose')\n        ctx.closePath()"]}