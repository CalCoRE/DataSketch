{"version":3,"sources":["modules/canvas/objects/base/view.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,IAAA,GAAO,OAAA,CAAQ,gBAAR;WAED;;;MACS,wBAAC,KAAD;;;;;;;;MAAA;;+BAEb,IAAA,GAAM,SAAC,GAAD,EAAM,KAAN,GAAA;;+BAEN,UAAA,GAAY,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;QACV,GAAG,CAAC,IAAJ,CAAA;QACA,GAAG,CAAC,SAAJ,CAAc,KAAK,CAAC,GAAN,CAAU,YAAV,CAAd,EAAuC,KAAK,CAAC,GAAN,CAAU,YAAV,CAAvC;QACA,GAAG,CAAC,MAAJ,CAAW,KAAK,CAAC,GAAN,CAAU,UAAV,CAAX;eACA,GAAG,CAAC,KAAJ,CAAU,KAAK,CAAC,GAAN,CAAU,SAAV,CAAV,EAAgC,KAAK,CAAC,GAAN,CAAU,SAAV,CAAhC;MAJU;;+BAMZ,QAAA,GAAU,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb,GAAA;;+BAEV,MAAA,GAAQ,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;QACN,IAAC,CAAA,UAAD,CAAY,GAAZ,EAAiB,KAAjB,EAAwB,SAAxB;QACA,IAAC,CAAA,QAAD,CAAU,GAAV,EAAe,KAAf,EAAsB,SAAtB;QACA,IAAC,CAAA,IAAD,CAAM,GAAN,EAAW,KAAX,EAAkB,SAAlB;QACA,IAAC,CAAA,SAAD,CAAW,GAAX,EAAgB,KAAhB,EAAuB,SAAvB;QACA,IAAC,CAAA,gBAAD,CAAkB,GAAlB,EAAuB,KAAvB,EAA8B,SAA9B;eACA,IAAC,CAAA,WAAD,CAAa,GAAb,EAAkB,KAAlB,EAAyB,SAAzB;MANM;;+BAQR,SAAA,GAAW,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb,GAAA;;+BAEX,WAAA,GAAa,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;eACX,GAAG,CAAC,OAAJ,CAAA;MADW;;+BAGb,gBAAA,GAAkB,SAAC,GAAD,EAAM,KAAN,EAAa,SAAb;AAChB,YAAA;QAAA,IAAG,KAAK,CAAC,GAAN,CAAU,qBAAV,CAAH;UACE,GAAG,CAAC,IAAJ,CAAA;UACA,GAAA,GAAM,KAAK,CAAC,WAAN,CAAA;UACN,GAAG,CAAC,SAAJ,CAAA;UACA,GAAG,CAAC,SAAJ,GAAgB;UAChB,GAAG,CAAC,WAAJ,GAAkB;UAClB,GAAG,CAAC,WAAJ,GAAkB;UAClB,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAM,CAAC,CAApB,EAAuB,GAAG,CAAC,MAAM,CAAC,CAAlC,EAAqC,GAAG,CAAC,KAAzC,EAAgD,GAAG,CAAC,MAApD;UACA,GAAG,CAAC,IAAJ,CAAA;UACA,GAAG,CAAC,MAAJ,CAAA;iBACA,GAAG,CAAC,OAAJ,CAAA,EAVF;;MADgB;;;;OA1BS;EAHxB,CAAP;AAAA","file":"modules/canvas/objects/base/view.js","sourceRoot":"/source/","sourcesContent":["define (require) ->\n  View = require 'core/view/view'\n\n  class BaseObjectView extends View\n    constructor: (model) ->\n\n    draw: (ctx, model) =>\n\n    _prerender: (ctx, model, timeDelta) =>\n      ctx.save()\n      ctx.translate model.get('position.x'), model.get('position.y')\n      ctx.rotate model.get('rotation')\n      ctx.scale model.get('scale.x'), model.get('scale.y')\n\n    _predraw: (ctx, model, timeDelta) =>\n\n    render: (ctx, model, timeDelta) =>\n      @_prerender ctx, model, timeDelta\n      @_predraw ctx, model, timeDelta\n      @draw ctx, model, timeDelta\n      @_postdraw ctx, model, timeDelta\n      @_drawBoundingBox ctx, model, timeDelta\n      @_postrender ctx, model, timeDelta\n\n    _postdraw: (ctx, model, timeDelta) =>\n\n    _postrender: (ctx, model, timeDelta) =>\n      ctx.restore()\n\n    _drawBoundingBox: (ctx, model, timeDelta) =>\n      if model.get 'boundingbox.display'\n        ctx.save()\n        box = model.boundingBox()\n        ctx.beginPath()\n        ctx.fillStyle = \"transparent\"\n        ctx.strokeStyle = \"rgba(0,0,255, 1)\"\n        ctx.strokeWidth = 1\n        ctx.rect box.offset.x, box.offset.y, box.width, box.height\n        ctx.fill()\n        ctx.stroke()\n        ctx.restore()"]}