{"version":3,"sources":["modules/menu/menu.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,UAAA,GAAa,OAAA,CAAQ,4BAAR;IACb,KAAA,GAAQ,OAAA,CAAQ,SAAR;IACR,IAAA,GAAO,OAAA,CAAQ,QAAR;IACP,OAAA,GAAU,OAAA,CAAQ,oBAAR;IAEJ;;;MACS,cAAC,MAAD;;;AACX,YAAA;;UAAA,SAAU;;;UACV,MAAM,CAAC,aAAc;;;UACrB,MAAM,CAAC,YAAa;;QAEpB,IAAG,+DAAH;UACE,KAAA,GAAQ;AAGR;AAAA,eAAA,sCAAA;;YACE,KAAK,CAAC,IAAN,CAAW,IAAI,CAAC,QAAL,CAAc,IAAd,CAAX;AADF;UAGA,MAAM,CAAC,SAAS,CAAC,KAAjB,GAAyB,MAP3B;;QASA,sCAAM,MAAN;QAEA,IAAC,CAAA,IAAD,CAAA,CAAO,CAAC,gBAAR,CAAyB,oBAAzB,EAA+C,IAAC,CAAA,gBAAhD;MAhBW;;qBAkBb,OAAA,GAAS,SAAC,IAAD;AACP,YAAA;QAAA,KAAA,GAAQ,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,OAAZ;QACR,KAAK,CAAC,IAAN,CAAW,IAAI,CAAC,QAAL,CAAc,IAAd,CAAX;eACA,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,OAAZ,EAAqB,KAArB;MAHO;;qBAKT,gBAAA,GAAkB,SAAC,GAAD;QAChB,IAAG,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,QAAZ,CAAH;UACE,OAAO,CAAC,GAAR,CAAY,OAAZ,CAAoB,CAAC,aAArB,CAAmC,sBAAnC,EACE;YAAA,MAAA,EAAQ,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,QAAZ,CAAR;WADF;iBAEA,IAAC,CAAA,aAAD,CAAe,sBAAf,EAAuC,EAAvC,EAHF;;MADgB;;;;OAxBD;IA8BnB,IAAI,CAAC,QAAL,GAAgB,CAAA,SAAA,KAAA;aAAA,SAAC,IAAD;QACd,IAAG,IAAA,YAAgB,IAAnB;AACE,iBAAO,KADT;;eAEA,IAAI,CAAC,UAAL,CAAgB,IAAhB;MAHc;IAAA,CAAA,CAAA,CAAA,IAAA;IAKhB,IAAI,CAAC,UAAL,GAAkB,CAAA,SAAA,KAAA;aAAA,SAAC,IAAD;eACZ,IAAA,IAAA,CACF;UAAA,SAAA,EAAW,IAAX;SADE;MADY;IAAA,CAAA,CAAA,CAAA,IAAA;WAIlB;EA7CK,CAAP;AAAA","file":"modules/menu/menu.js","sourceRoot":"/source/","sourcesContent":["define (require) ->\n  Controller = require 'core/controller/controller'\n  Model = require './model'\n  View = require './view'\n  Globals = require 'core/model/globals'\n\n  class Menu extends Controller\n    constructor: (config) ->\n      config ?= {}\n      config.modelClass ?= Model\n      config.viewClass ?= View\n\n      if config.modelData?.items?\n        items = []\n\n        # ensure that every menu item is wrapped as a Menu object\n        for item in config.modelData.items\n          items.push Menu.wrapMenu item\n\n        config.modelData.items = items\n\n      super config\n\n      @view().addEventListener \"Menu.ActionRequest\", @_onActionRequest\n\n    addItem: (item) =>\n      items = @_model.get 'items'\n      items.push Menu.wrapMenu item\n      @_model.set 'items', items\n\n    _onActionRequest: (evt) =>\n      if @_model.get 'action'\n        Globals.get('Relay').dispatchEvent 'Action.RequestAction',\n          action: @_model.get 'action'\n        @dispatchEvent 'Menu.ActionRequested', {}\n\n  Menu.wrapMenu = (item) =>\n    if item instanceof Menu\n      return item\n    Menu.createMenu item\n\n  Menu.createMenu = (data) =>\n    new Menu\n      modelData: data\n\n  Menu"]}