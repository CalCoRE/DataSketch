{"version":3,"sources":["modules/datasketch/animation/animator.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;;;EAAA,MAAA,CAAO,SAAC,OAAD;AACL,QAAA;IAAA,eAAA,GAAkB,OAAA,CAAQ,uBAAR;WAEZ;;;MACS,kBAAC,QAAD;QAAC,IAAC,CAAA,WAAD;;;;;;;QACZ,IAAC,CAAA,SAAD,GAAa;MADF;;yBAGb,IAAA,GAAM,SAAA;QACJ,IAAC,CAAA,UAAD,GAAc;QACd,IAAC,CAAA,SAAD,GAAa,CAAC,IAAI,IAAL,CAAU,CAAC,OAAX,CAAA;eACb,IAAC,CAAA,QAAD,CAAA;MAHI;;yBAKN,KAAA,GAAO,SAAA;eACL,IAAC,CAAA,UAAD,GAAc;MADT;;yBAGP,KAAA,GAAO,SAAA;eACL,IAAC,CAAA,SAAD,GAAa;MADR;;yBAGP,KAAA,GAAO,SAAA;AACL,YAAA;AAAA;AAAA;aAAA,qCAAA;;uBACE,GAAG,CAAC,UAAJ,CAAA;AADF;;MADK;;yBAIP,OAAA,GAAS,SAAA;AACP,YAAA;AAAA;AAAA,aAAA,qCAAA;;UACE,GAAG,CAAC,YAAJ,CAAA;AADF;eAEA,IAAC,CAAA,QAAQ,CAAC,MAAM,CAAC,SAAjB,CAAA;MAHO;;yBAKT,QAAA,GAAU,SAAA;AACR,YAAA;QAAA,IAAG,IAAC,CAAA,UAAJ;UACE,QAAA,GAAW,CAAC,IAAI,IAAL,CAAU,CAAC,OAAX,CAAA;UACX,KAAA,GAAQ,IAAC,CAAA,QAAQ,CAAC,SAAS,CAAC,GAApB,CAAwB,MAAxB,CAA+B,CAAC,MAAhC,GAAyC,MAAM,CAAC,gBAAgB,CAAC,UAAjE,GAA8E;UACtF,KAAA,GAAQ,QAAA,GAAW,IAAC,CAAA;UACpB,IAAC,CAAA,SAAD,GAAa,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,IAAC,CAAA,SAAD,GAAa,KAA7B;AACb;AAAA,eAAA,qCAAA;;YACE,GAAG,CAAC,OAAJ,CAAY,IAAC,CAAA,SAAb,EAAwB,KAAxB,EAA+B,IAAC,CAAA,QAAQ,CAAC,SAAzC;AADF;UAEA,IAAC,CAAA,QAAQ,CAAC,MAAM,CAAC,SAAjB,CAAA;UACA,IAAC,CAAA,SAAD,GAAa;UAEb,IAAC,CAAA,aAAD,CAAe,eAAf,EACE;YAAA,QAAA,EAAU,IAAC,CAAA,SAAX;YACA,KAAA,EAAO,KADP;WADF;UAIA,IAAG,IAAC,CAAA,SAAD,IAAc,KAAjB;YAEE,IAAC,CAAA,SAAD,GAAa,EAFf;;iBAIA,MAAM,CAAC,qBAAP,CAA6B,IAAC,CAAA,QAA9B,EAlBF;;MADQ;;;;OAxBW;EAHlB,CAAP;AAAA","file":"modules/datasketch/animation/animator.js","sourceRoot":"/source/","sourcesContent":["define (require) ->\n  EventDispatcher = require 'core/event/dispatcher'\n\n  class Animator extends EventDispatcher\n    constructor: (@settings) ->\n      @_playhead = 0\n\n    play: () =>\n      @_isPlaying = true\n      @_lastTime = (new Date).getTime()\n      @_animate()\n\n    pause: () =>\n      @_isPlaying = false\n\n    reset: () =>\n      @_playhead = 0\n\n    cache: () =>\n      for obj in @settings.canvas.getObjects()\n        obj.cacheState()\n\n    restore: () =>\n      for obj in @settings.canvas.getObjects()\n        obj.restoreState()\n      @settings.canvas.dryRender()\n\n    _animate: () =>\n      if @_isPlaying\n        currTime = (new Date).getTime()\n        total = @settings.datastore.get('rows').length * window.DataSketchConfig.timePerRow * 1000\n        delta = currTime - @_lastTime\n        @_playhead = Math.min(total, @_playhead + delta)\n        for obj in @settings.canvas.getObjects()\n          obj.animate @_playhead, delta, @settings.datastore\n        @settings.canvas.dryRender()\n        @_lastTime = currTime\n\n        @dispatchEvent 'Animator.Tick',\n          playhead: @_playhead\n          total: total\n\n        if @_playhead >= total\n          # @_isPlaying = false\n          @_playhead = 0\n\n        window.requestAnimationFrame @_animate"]}